import javax.websocket.*;
import javax.websocket.server.ServerEndpoint;
import java.io.IOException;
import java.net.URI;
import java.nio.ByteBuffer;   

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;   


@ClientEndpoint
public class WebSocketClient {
    private static final String WEBSOCKET_URI = "ws://your_websocket_server:port"; // Replace with your WebSocket server URL

    private Session session;
    private CountDownLatch latch;

    @OnOpen
    public void onOpen(Session session) {
        this.session = session;
        latch.countDown();
    }

    @OnMessage
    public void onMessage(String message) {
        System.out.println("Received message: " + message);
    }

    @OnMessage
    public void onMessage(ByteBuffer data) {
        byte[] bytes = new byte[data.remaining()];
        data.get(bytes);
        System.out.println("Received binary data: " + new String(bytes));
    }

    @OnError
    public void onError(Session session, Throwable throwable) {
        System.err.println("WebSocket error: " + throwable.getMessage());
    }

    public static void main(String[]   
 args) throws Exception {
        WebSocketClient client = new WebSocketClient();
        client.latch = new CountDownLatch(1);

        ContainerProvider containerProvider = ContainerProvider.getWebSocketContainer();
        URI uri = new URI(WEBSOCKET_URI);
        client.session = containerProvider.connectToServer(WebSocketClient.class, uri);

        // Wait for the connection to be established
        client.latch.await(10, TimeUnit.SECONDS);

        // Send a message to the server (optional)
        if (client.session != null) {
            client.session.getBasicRemote().sendText("Hello from client!");
        }

        // Keep the client running until terminated
        System.out.println("Press Enter to close the connection");
        System.in.read();
        client.session.close();
    }
}
